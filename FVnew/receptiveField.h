/* receptiveField.h defines the foveated image structure.
 * By default, a foveated image includes 5 layers of 32*32 images.
 * The i-th layer corresponding to a 2^(i-1) * 2^(i-1) area of 
 * original image. 
 * */

#ifndef FOVEATED_IMAGE_H
#define FOVEATED_IMAGE_H

#include<opencv2/opencv.hpp>

#define LAYER_NUMBER 5 // #layers in each foveated image
#define FIELD_SIZE 32  //size of the receptive field

#define FOVEATED_IMAGE_SIZE 512 // size of reconstructed image

#define COLOR_LEN 3 // for regular BGR color , use 3. for grayscale, use 1

/* color structure used in foveated project. color is stored in BGR format, represented by an array of 3 unsigned char.
 * valid param indicates whether the color is generated by a valid block
 */
typedef struct fv_color_t {
    cv::Vec3b c;
    bool valid;
} fv_color_t;

/* a layer might have some parts out of range of the original image.
 * valid is the indicator variable to show whether the value is blank or real value*/
typedef struct field_t {
    //cv::Vec3b field[FIELD_SIZE][FIELD_SIZE];
    //bool valid[FIELD_SIZE][FIELD_SIZE];
    fv_color_t field[FIELD_SIZE][FIELD_SIZE];
} field_t;

class foveatedImage_t {
private:
    
    cv::Point centerPosition;

    field_t field[LAYER_NUMBER];

    /* pointers to reconstructedImages*/
    cv::Mat* reconstructedImage;
    cv::Mat* embeddedReconstrcutedImage;

    /* pointer to original image*/
    cv::Mat* origin;

    /* select a color for a block*/
    fv_color_t colorSelector(int pos_y, int pos_x, int layer);

public:
    foveatedImage_t() = delete;

    /* constructor for foveated image.
     * Must be created from a raw image with a given center position.
     * default constructor is disabled.
     */
    foveatedImage_t(cv::Mat* rawImage, cv::Point centerPosition);

    /* destructor. Will also destroy the reconstructed image if its not freed properly before.*/
    ~foveatedImage_t();

    /* Reconstruct a raw openCV format(cv::Mat) image from the foveatedImage. The image is stored in a seperated allocated memory space; Need to be freed after use. We provide a private pointer to locate that reconstructed image. Will try to free the reconstructed image for safety in destructor.
     */
    cv::Mat* createReconstructedImage();

    /* return the reconstrcuted image if it's already created by createRecontructedImage().
     * call createReconstructedImage() if not created.
     */
    cv::Mat* getReconstructedImage();

    /* free the space for reconstructed image.*/
    void freeReconstructedImage();
    
    /* creates an embedded version of image.*/
    cv::Mat* createEmbeddedFoveatedImage();

    /* return the reconstructed embedded version of image if valid.
     * call createEmbeddedFoveatedImage() if not yet created.
     */
    cv::Mat* getReconstructedEmbeddedImage();
    
    /* free the embedded version of image*/
    void freeEmbeddedReconstructedImage();


};

#endif
